bubble sort
// #include<bits/stdc++.h>
// #include<omp.h>
// #include<chrono>
// using namespace std::chrono;
// using namespace std;
// void bubble_Sort(vector<int>& arr){
//     bool swapped=1;
//     #pragma omp parallel default(none) shared(arr,swapped)
//     while(swapped){
//         swapped=false;
//         #pragma omp for 
//         for(int i=0;i<arr.size();i++){
//             if(arr[i]>arr[i+1]){
//                 swap(arr[i],arr[i+1]);
//                 swapped=true;
                
//             }
//         }
//     }
// }
// void sequential_bubble_Sort(vector<int>& arr){
//     bool swapped=1;
//     while(swapped){
//         swapped=false;
//         for(int i=0;i<arr.size();i++){
//             if(arr[i]>arr[i+1]){
//                 swap(arr[i],arr[i+1]);
//                 swapped=true;
//             }
//         }
//     }
// }
// int main(){
//     cout<<"Pls enter the size of the array"<<endl;
//     int size;
//     cin>>size;
//     vector<int>arr(size);
//     srand(std::time(0));
//     for (int i = 0; i < size; ++i) {
//         arr[i]=rand()%size+1;
//     }
//     cout<<"array before is "<<endl;
//     for(int i=0;i<size;i++){
//         cout<<arr[i]<<" ";
//     }
//     cout<<endl;
//     vector<int>store=arr;
//     auto start=high_resolution_clock::now();
//     sequential_bubble_Sort(arr);
//     auto stop=high_resolution_clock::now();
//     auto duration=duration_cast<nanoseconds>(stop-start);
//     cout<<"sequential_bubble_sort time taken is "<<duration.count()<<endl;
//     // for(int i=0;i<size;i++){
//     //     cout<<arr[i]<<" ";
//     // }
//     cout<<endl;
//     start=high_resolution_clock::now();
//     bubble_Sort(store);
//     stop=high_resolution_clock::now();
//     duration=duration_cast<nanoseconds>(stop-start);
//     cout<<"parallel_bubble_sort time taken is "<<duration.count()<<endl;
// }

MERGE SORT

#include<bits/stdc++.h>
#include<omp.h>
#include<chrono>
using namespace std::chrono;
using namespace std;
void merging_arrays(vector<int>& arr,int left,int mid,int right){
    int m=mid-left+1;
    int n=right-mid;
    vector<int>left_arr(m);
    vector<int>right_arr(n);
    for(int i=0;i<m;i++){
        left_arr[i]=arr[left+i];
    }
    for(int i=0;i<n;i++){
        right_arr[i]=arr[m+1+i];
    }
    int i=0;
    int j=0;
    int k=left;
    while(i<m and j<n){
        if(left_arr[i]<=right_arr[j]){
            arr[k]=left_arr[i];
            i++;
        }
        else
        {
            arr[k]=right_arr[j];
            j++;
        }
        k++;
    }
    while(i<m){
        arr[k]=left_arr[i];
        i++;
        k++;
    }
    while(j<n){
        arr[k]=right_arr[j];
        j++;
        k++;
    }
}
void parallel_merge(vector<int>& arr,int l,int r){
    if(l<r){
        int mid=l+(r-l)/2;
        #pragma omp parallel for 
        parallel_merge(arr,l,mid);
        parallel_merge(arr,mid+1,r);
        merging_arrays(arr,l,mid,r);
    }
    
}
void sequential_merge(vector<int>& arr,int l,int r){
    if(l<r){
        int mid=l+(r-l)/2;
        sequential_merge(arr,l,mid);
        sequential_merge(arr,mid+1,r);
        merging_arrays(arr,l,mid,r);
    }
}

int main(){
    cout<<"Enter the size of array"<<endl;
    int size;
    cin>>size;
    vector<int>arr(size);
    srand(time(0));
    for(int i=0;i<size;i++){
        arr[i]=rand()%size+1;
    }
    cout<<"The array before sorting is"<<endl;
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    vector<int>store=arr;
    auto start=high_resolution_clock::now();
    sequential_merge(arr,0,size-1);
    auto stop=high_resolution_clock::now();
    auto duration=duration_cast<nanoseconds>(stop-start);
    cout<<"time taken for sequential sort is:"<<duration.count()<<endl;
    
    
    start=high_resolution_clock::now();
    parallel_merge(store,0,size-1);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"time taken for parallel sort is:"<<duration.count()<<endl;
    cout<<"The array after sorting is"<<endl;
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}

Assignment-3 (min,max,average,sum)

#include<bits/stdc++.h>
#include<omp.h>
#include<chrono>
using namespace std;
using namespace std::chrono;
void max_parallel(vector<int>& a,int n){
    int mx=INT_MIN;
    #pragma omp parallel for reduction(max:mx)
    for(int i=0;i<n;i++){
        if(a[i]>mx){
            mx=a[i];
        }
    }
    cout<<"maximum number is :"<<mx<<endl;
    
}
void min_parallel(vector<int>& a,int n){
    int mn=INT_MAX;
    #pragma omp parallel for reduction(min:mn)
    for(int i=0;i<n;i++){
        if(a[i]<mn){
            mn=a[i];
        }
    }
    cout<<"minimum number is :"<<mn<<endl;
    
}
void sum_parallel(vector<int>& a,int n){
    int sum=0;
    #pragma omp parallel for reduction(+:sum)
    for(int i=0;i<n;i++){
        sum+=a[i];
    }
    cout<<"sum of number is :"<<sum<<endl;
    
}
void average_parallel(vector<int>& a,int n){
    double sum=0,count=n;
    for(int i=0;i<n;i++){
        sum+=a[i];
    }
    double average=sum/count;
    cout<<"average is :"<<average<<endl;
    
    
}
void max_sequential(vector<int>& a,int n){
    int mx=INT_MIN;
    #pragma omp parallel for reduction(max:mx)
    for(int i=0;i<n;i++){
        if(a[i]>mx){
            mx=a[i];
        }
    }
    cout<<"maximum number is :"<<mx<<endl;
    
}
void min_sequential(vector<int>& a,int n){
    int mn=INT_MAX;
    #pragma omp parallel for reduction(min:mn)
    for(int i=0;i<n;i++){
        if(a[i]<mn){
            mn=a[i];
        }
    }
    cout<<"minimum number is :"<<mn<<endl;
    
}
void sum_sequential(vector<int>& a,int n){
    int sum=0;
    #pragma omp parallel for reduction(+:sum)
    for(int i=0;i<n;i++){
        sum+=a[i];
    }
    cout<<"sum of number is :"<<sum<<endl;
    
}
void average_sequential(vector<int>& a,int n){
    double sum=0,count=n;
    for(int i=0;i<n;i++){
        sum+=a[i];
    }
    double average=sum/count;
    cout<<"average is :"<<average<<endl;
    
    
}
int main(){
    cout<<"enter array"<<endl;
    int size;
    cin>>size;
    srand(time(0));
    vector<int>a(size);
    for(int i=0;i<size;i++){
        a[i]=rand()%size+1;
    }
    auto start=high_resolution_clock::now();
    min_parallel(a,size);
    auto stop=high_resolution_clock::now();
    auto duration=duration_cast<nanoseconds>(stop-start);
    cout<<"min_parallel_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    max_parallel(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"max_parallel_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    sum_parallel(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"sum_parallel_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    average_parallel(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"average_parallel_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    min_sequential(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"min_seq_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    max_sequential(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"max_sequential_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    sum_sequential(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"sum_sequential_time is"<<duration.count()<<endl;
    
    start=high_resolution_clock::now();
    average_sequential(a,size);
    stop=high_resolution_clock::now();
    duration=duration_cast<nanoseconds>(stop-start);
    cout<<"average_sequential_time is"<<duration.count()<<endl;
    
    
    
}
CUDA ADDITION

#include<bits/stdc++.h>
#include<cuda_runtime.h>
__global__void addVectors(int *A,int *B,int *C,int n){
int i=blockIdx.x*blockDim.x+threadIdx.x;
if(i<n){
    C[i]=A[i]+B[i];
}
    
}
int main(){
    int n=100000;
    int *A, *B, *C;
    int size=n*sizeof(int);
    cudaMallocHost(&A,size);
    cudaMallocHost(&B,size);
    cudaMallocHost(&C,size);
    for(int i=0;i<n;i++){
        A[i]=i;
        B[i]=i*2;
    }
    int *dev_A, *dev_B, *dev_C;
    cudaMalloc(&dev_A,size);
    cudaMalloc(&dev_B,size);
    cudaMalloc(&dev_C,size);
    
    cudaMemcpy(dev_A,A,size,cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B,B,size,cudaMemcpyHostToDevice);
    int blockSize=256;
    int numBlocks=(n+blockSize-1)/blockSize;
    addVectors<<numBlocks,blockSize>>(dev_A,dev_B,dev_C,n);
    cudaMemcpy(C,dev_C,size,cudaMemcpyDeviceToHost);
    for(int i=0;i<10;i++){
        cout<<C[i]<<" ";
    }
    cout<<endl;
    cudaFree(dev_A);cudaFree(dev_B);cudaFree(dev_C);cudaFree(A);cudaFree(B);cudaFree(C);
    return 0;
    
}
CUDA MULTIPLY
#include<bits/stdc++.h>
#include<cuda_runtime.h>
__global__void mul(int *A,int *B,int *C,int n){
    int row=blockIdx.y*blockDim*y+threadIdx.y
    int column=;blockIdx.x*blockDim*x+threadIdx.x;
    if(row<n and column<n){
        int pvalue=0;
        for(int k=0;k<n;k++){
            Pval=A[row*n+k]*B[k*N+column];
        }
        C[row*N+column]=Pvalue;
    }
}
int main(){
    int n=512;
    int size=n*n*sizeof(int);
    int *A,*B,*C;
    int *dev_A,*dev_B,*dev_C;
    cudaMallocHost(&A,size);
    cudaMallocHost(&B,size);
    cudaMallocHost(&C,size);
    cudaMalloc(&dev_A,size);
    cudaMalloc(&dev_B,size);
    cudaMalloc(&dev_C,size);
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            A[i*n+j]=i*N+j;
            B[j*n+i]=j*n+i;
            
        }
    }
    cudaMemcpy(dev_A,A,size,cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B,B,size,cudaMemcpyHostToDevice);
    dim3 dimBlock(16,16);
    dim3 dimGrid(N/dimBlock.x,N/dimBlock.y);
    cudaMemcpy(C,dev_C,size,cudaMemcpyDeviceToHost);
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            cout<<C[i*n+j]<<" ";
        }
    }
    cudaFree(dev_A);cudaFree(dev_B);cudaFree(dev_C);cudaFree(A);cudaFree(B);cudaFree(C);
    return 0;
    
    
}

LINEAR 
#include<bits/stdc++.h>
#include<omp.h>
#include<chrono>
using namespace std::chrono;
using namespace std;
double linear_parallel(vector<double>& x,vector<double>& y,int n){
    double sum_x=0;
    double sum_y=0;
    #pragma omp parallel for reduction(+:sum_x,sum_y)
    for(int i=0;i<n;i++){
        sum_x+=x[i];
        sum_y+=y[i];
    }
    double x_mean=sum_x/n;
    double y_mean=sum_y/n;
    double num=0;
    double den=0;
    #pragma omp parallel for reduction(+:num,den)
    for(int i=0;i<n;i++){
        num+=(x[i]-x_mean)*(y[i]-y_mean);
        den+=(x[i]-x_mean)*(x[i]-x_mean);
    }
    return num/den;
    
    
    
}
double linear_seq(vector<double>& x,vector<double>& y,int n){
    double sum_x=0;
    double sum_y=0;
    for(int i=0;i<n;i++){
        sum_x+=x[i];
        sum_y+=y[i];
    }
    double x_mean=sum_x/n;
    double y_mean=sum_y/n;
    double num=0;
    double den=0;
    for(int i=0;i<n;i++){
        num+=(x[i]-x_mean)*(y[i]-y_mean);
        den+=(x[i]-x_mean)*(x[i]-x_mean);
    }
    return num/den;
    
    
    
}
int main(){
    cout<<"Enter total number of element in dataset"<<endl;
    int n;
    cin>>n;
    srand(time(0));
    vector<double>x(n),y(n);
    for(int i=0;i<n;i++){
        x[i]=rand()%n+1;
        y[i]=rand()%n+1;
    }
    cout << "\nUsing sequential computing---\n";
    cout << "Linear Regression line has slope: ";
    auto start = high_resolution_clock::now();
    double result = linear_seq(x, y,n);
    auto end = high_resolution_clock::now();
    cout << result << endl;
    auto dur = duration_cast<nanoseconds>(end - start);
    cout<<"sequence time is"<<dur.count()<<endl;
    
    
     cout << "\nUsing parallel computing---\n";
    cout << "Linear Regression line has slope: ";
    start = high_resolution_clock::now();
    double result1 = linear_parallel(x, y,n);
    end = high_resolution_clock::now();
    cout << result1 << endl;
    dur = duration_cast<nanoseconds>(end - start);
    cout<<"parallel time is"<<dur.count()<<endl;
    
    
    
}
KNN
#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <omp.h>

struct IrisData {
    std::vector<double> features;
    int label;
};

double euclidean_distance(const std::vector<double>& point1, const std::vector<double>& point2) {
    double distance = 0.0;
    for (size_t i = 0; i < point1.size(); i++) {
        distance += std::pow(point1[i] - point2[i], 2);
    }
    return std::sqrt(distance);
}

std::vector<int> knn_parallel(const std::vector<IrisData>& train_data, const std::vector<IrisData>& test_data, int k) {
    std::vector<int> predictions;
    #pragma omp parallel for
    for (size_t i = 0; i < test_data.size(); i++) {
        const IrisData& test_instance = test_data[i];
        std::vector<std::pair<double, int>> distances;

        for (size_t j = 0; j < train_data.size(); j++) {
            const IrisData& train_instance = train_data[j];
            double distance = euclidean_distance(test_instance.features, train_instance.features);
            distances.emplace_back(distance, train_instance.label);
        }

        std::partial_sort(distances.begin(), distances.begin() + k, distances.end(),
            [](const std::pair<double, int>& a, const std::pair<double, int>& b) {
                return a.first < b.first;
            });

        std::vector<int> label_counts(3, 0);
        for (int j = 0; j < k; j++) {
            label_counts[distances[j].second]++;
        }

        int max_count = *std::max_element(label_counts.begin(), label_counts.end());
        int predicted_label = std::distance(label_counts.begin(), std::find(label_counts.begin(), label_counts.end(), max_count));
        predictions.push_back(predicted_label);
    }

    return predictions;
}

int main() {
    // Load the Iris dataset
    std::vector<IrisData> data = {
        {{5.1, 3.5, 1.4, 0.2}, 0},
        {{4.9, 3.0, 1.4, 0.2}, 0},
        // Add the remaining instances from the dataset
    };

    // Split the dataset into training and test sets
    std::vector<IrisData> train_data(data.begin(), data.begin() + 120);
    std::vector<IrisData> test_data(data.begin() + 120, data.end());

    // KNN
    int k = 5;
    std::vector<int> predictions = knn_parallel(train_data, test_data, k);

    // Print the predictions
    for (int label : predictions) {
        std::cout << label << " ";
    }
    std::cout << std::endl;

    return 0;
}
